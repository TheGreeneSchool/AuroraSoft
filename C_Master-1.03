/*Alto: Aurora ------ Master test 1.03 -- Teddy Duncker: TTB Aerospace, With Code from: Cole Purtzer: Delta Space Systems

Known issues:
- Adding in BMP reading through adafruit lib exceeds arduino mem, add diff LIB
- Would like to remove the servo "gear ratio" value and ONLY control rocket w/ PID
- Arduino Euler angle lib WONT work for highher flights - Switch to quats from camerons BNO055 lib 
- Would like to have a way to more cleanly switch states


States: 
- Startup --> Startup Function
- PadIdle --> Waiting for launch
- Powered --> Flight
- freefall --> deploy chutes, close data
- Program terminated --> continuously spam "program terminated" and wait for shutoff

///////////////////////////////////////---------------- VERSION FOR TF-3 - 11/22 -----------------------//////////*/

#include <Wire.h>
#include <Arduino.h>
#include <Servo.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <SD.h>
#include "MegunoLink.h"
#include "Filter.h"
 //#include "Adafruit_BMP3XX.h"
//#define SEALEVELPRESSURE_HPA (1013.25)

//Adafruit_BMP3XX bmp; // I2C
Adafruit_BNO055 bno(55);

//sd card
File myFile;

//loop State variables
int state = 0;
int threshold = 11;
//float baseAlt;

// Set servo start value
const int servoY_offset = 68;
const int servoZ_offset = 124;
Servo servoY;
Servo servoZ;

//PID Variables
double PIDZ, PIDY, errorZ, errorY, previous_errorZ, previous_errorY;

//Upright Angle of the Gyroscope
int desired_angleZ = 0; //servoY
int desired_angleY = 0; //servoX

//"P" Constants
float pidZ_p = 0;
float pidY_p = 0;

//"D" Constants
float pidZ_d = 0;
float pidY_d = 0;

//PID Gains
double kp = .9;
double kd = .2;

double dt, currentTime, previousTime;

//filter
ExponentialFilter < long > ADCFilter(70, 0);
double filteredZ = 0;
//filter2
ExponentialFilter < long > ADCFilterY(70, 0);
double filteredY = 0;

//pinouts for Aurora R1
const int servo_x = 5;
const int servo_y = 6;
const int ledPinG = 7;
const int ledPinR = 8;
const int ledPinB = 9;
const int buzzer = 10;
const int pyro1 = 11;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  Serial.begin(9600);
  delay(200);
  bno.setExtCrystalUse(true);

  // Servo
  servoY.attach(5);
  servoZ.attach(6);
  servoY.write(servoY_offset);
  servoZ.write(servoZ_offset);

  pinMode(buzzer, OUTPUT);
  pinMode(pyro1, OUTPUT);

  tone(buzzer, 200, 200);
  delay(300);
  tone(buzzer, 800, 200);
  delay(300);
  tone(buzzer, 500, 200);
  digitalWrite(ledPinG, HIGH); 
  delay(300); /
  digitalWrite(ledPinG, LOW); 
  delay(500);
  digitalWrite(ledPinG, HIGH); 
  delay(300); 
  digitalWrite(ledPinG, LOW); 
  delay(500);

  if (!SD.begin(4)) {
    digitalWrite(ledPinR, HIGH);
    tone(buzzer, 200, 200);
    delay(300);
    tone(buzzer, 200, 200);
    delay(300);
    while (1);
  }

  SD.remove("flight.csv");
  myFile = SD.open("flight.csv", FILE_WRITE);

  if (myFile) {
    myFile.println("time, verticalAccel, rawDegreeY, rawDegreeZ, pidY, pidZ, servoOutY, servoOutZ");
  }

  if (!bno.begin()) {
    while (1);
  }

  /*
    if (!bmp.begin_I2C()) {
      while (1);
    }
    bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_15);
    baseAlt = bmp.readAltitude(SEALEVELPRESSURE_HPA) * 3.281;
  */
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {
  if (state == 0) {
    imu::Vector < 3 > li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    digitalWrite(ledPinR, HIGH); 
    if (li_ac.z() > threshold) {
      Serial.print(li_ac.z());
      state++;
    }

  }

  if (state == 1) {

    //Defining Time Variables
    currentTime = millis();
    dt = (currentTime - previousTime) / 1000;

    //LED
    digitalWrite(ledPinR, LOW); 
    digitalWrite(ledPinB, HIGH); 

    //IMU DATA
    imu::Vector < 3 > li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    imu::Vector < 3 > euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);

    double degreeY = euler.z();
    double degreeZ = euler.y();

    /////////////////////////////////////////////////////////////////////////////////////////////////FIRST
    previous_errorZ = errorZ;
    previous_errorY = errorY;

    //Inputs to the PID Controller
    errorZ = degreeZ - desired_angleZ;
    errorY = degreeY - desired_angleY;

    //Defining "P"
    pidZ_p = kp * errorZ;
    pidY_p = kp * errorY;

    //Defining "D"
    pidZ_d = kd * ((errorZ - previous_errorZ) / dt);
    pidY_d = kd * ((errorY - previous_errorY) / dt);
    //Adding it all up
    PIDZ = -1 * (pidZ_p + pidZ_d);
    PIDY = -1 * (pidY_p + pidY_d);

    //Apply filter
    double RawValue = PIDZ;
    ADCFilter.Filter(RawValue);
    filteredZ = ADCFilter.Current();

    //Apply filter
    double RawValueY = PIDY;
    ADCFilterY.Filter(RawValueY);
    filteredY = ADCFilterY.Current();


    //pwm
    double pwmY = (filteredY / 2) + servoY_offset;
    double pwmZ = (filteredZ / 2) + servoZ_offset;
    double cPwmY = constrain(pwmY, servoY_offset -15, servoY_offset +15);
    double cPwmZ = constrain(pwmZ, servoZ_offset -15, servoZ_offset +15);

    /////////////////////////////////////////////////////////////////////////////////////////////////SERVO
    /////////////////////////////////////////////////////////////////////////////////////////////////
    servoY.write(cPwmY);
    servoZ.write(cPwmZ);

    /////////////////////////////////////////////////////////////////////////////////////////////////DATA AND STATE
    /////////////////////////////////////////////////////////////////////////////////////////////////
    //datalogging
    myFile.print(currentTime);
    myFile.print(",");
    //myFile.print((bmp.readAltitude(SEALEVELPRESSURE_HPA) * 3.281) - baseAlt);
    //myFile.print(",");
    myFile.print(li_ac.z());
    myFile.print(",");
    myFile.print(degreeY);
    myFile.print(",");
    myFile.print(degreeZ);
    myFile.print(",");
    myFile.print(PIDY * -1);
    myFile.print(",");
    myFile.print(PIDZ * -1);
    myFile.print(",");
    myFile.print((-1) * (servoY.read() - servoY_offset));
    myFile.print(",");
    myFile.println((-1) * (servoZ.read() - servoZ_offset));

    //timing
    previousTime = currentTime;

    if (li_ac.z() < -5) {
      state++;
    }
  }

  if (state == 2) {
    digitalWrite(ledPinB, LOW); 
    digitalWrite(ledPinG, HIGH);
    //add in pyros if going for a chute deployment
    myFile.close();
    state++;
  }

  if (state == 3) {
    Serial.print("program terminated");

  }

}
