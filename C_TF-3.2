//TTB Aerospace: Alto: Aurora ------ VERSION 3.2 TF
///////////////////////////////////////---------------- VERSION FOR TF-3 - 11/4 -----------------------//////////
#include <Wire.h>
#include <SPI.h>
#include <Arduino.h>
#include <Servo.h>
#include <PID_v1.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include "MegunoLink.h"
#include "Filter.h"
#include <SD.h>
Adafruit_BNO055 bno(55);

//sd card
File myFile;

//loop State variables
int state = 0 ;
int times = 0;
int threshold = 1;

// Set servo start value
const int initialServoValue1 = 60 ;
const int initialServoValue2 = 130 ;
const float scaledServoGain = .65 ;
Servo servo1;
Servo servo2;

//pinouts for Aurora R1
const int servo_x = 5;
const int servo_y = 6;
const int ledPinG = 7;
const int ledPinR = 8;
const int ledPinB = 9;
const int buzzer = 10;
const int pyro1 = 11;



//PID Values
double desired, input, output;
double kp = 0.2;
double ki = 0.05;
double kd = 0.1;
//////////////////////////////
double desired2, input2, output2;
double kp2 = 0.2;
double ki2 = 0.05;
double kd2 = 0.1;
/////////////////////////////
PID pid(&input, &output, &desired, kp, ki, kd, DIRECT);
PID pid2(&input2, &output2, &desired2, kp2, ki2, kd2, DIRECT);


//filter
ExponentialFilter<long> ADCFilter(10, 0);
float filteredZ = 0;
//filter2
ExponentialFilter<long> ADCFilterY(10, 0);
float filteredY = 0;


void setup() {
  Serial.begin(9600);


  Serial.print("Initializing SD card...");
  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");
  myFile = SD.open("test.csv", FILE_WRITE);

  if (myFile) {
    myFile.println("time, verticalAccel, rawDegreeY, rawDegreeZ, pidY, pidZ, filteredServoY, filteredServoZ");
  }

  if (!bno.begin()) {
    Serial.println("Error initializing gyro sensor.\nPlease check connection!");
    while (1);
  }

  delay(200);
  bno.setExtCrystalUse(true);


  // Servo
  servo1.attach(5);
  servo2.attach(6);
  servo1.write(initialServoValue1);
  servo2.write(initialServoValue2);

  // Initialize PID
  pid.SetMode(AUTOMATIC);
  pid2.SetMode(AUTOMATIC);
  desired = 0;
  desired2 = 0;

  pinMode(buzzer, OUTPUT);
  pinMode(pyro1, OUTPUT);


  tone(buzzer, 200, 200);
  delay(300);
  tone(buzzer, 800, 200);
  delay(300);
  tone(buzzer, 500, 200);
  digitalWrite(ledPinG, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(300);                       // wait for a second
  digitalWrite(ledPinG, LOW);    // turn the LED off by making the voltage LOW
  delay(500);
  digitalWrite(ledPinG, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(300);                       // wait for a second
  digitalWrite(ledPinG, LOW);    // turn the LED off by making the voltage LOW
  delay(500);
}


void loop() {
  // Read gyro sensor data
  if (state == 0) {
    imu::Vector<3> li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    digitalWrite(ledPinR, HIGH);   // turn the LED on (HIGH is the voltage level)
    if (li_ac.z() > threshold ) {
      Serial.print(li_ac.z());
      state++ ;
    }

  }

  if (state == 1) {
    //LED
    digitalWrite(ledPinR, LOW);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledPinB, HIGH);   // turn the LED on (HIGH is the voltage level)

    //IMU DATA
    imu::Vector<3> li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);

    /////////////////////////////////////////////////////////////////////////////////////////////////FIRST
    /////////////////////////////////////////////////////////////////////////////////////////////////FIRST
    // Run PID loopZ
    double degreeZ = euler.z();
    input = abs(degreeZ);
    pid.Compute();

    // Apply correction value for Z axis
    double newZ;
    if (degreeZ < 0) {
      newZ = degreeZ + output;
    } else {
      newZ = degreeZ - output;
    }

    //Apply filter
    double RawValue = newZ;
    ADCFilter.Filter(RawValue);
    filteredZ = ADCFilter.Current();


    /////////////////////////////////////////////////////////////////////////////////////////////////second axis
    /////////////////////////////////////////////////////////////////////////////////////////////////second axis
    // Run PID loopY
    double degreeY = euler.y();
    input2 = abs(degreeY);
    pid2.Compute();

    // Apply correction value for Z axis
    double newY;
    if (degreeY < 0) {
      newY = degreeY + output2;
    } else {
      newY = degreeY - output2;
    }

    //Apply filter
    double RawValueY = newY;
    ADCFilterY.Filter(RawValueY);
    filteredY = ADCFilterY.Current();

    /////////////////////////////////////////////////////////////////////////////////////////////////SERVO
    /////////////////////////////////////////////////////////////////////////////////////////////////
    servo1.write((filteredZ * -(scaledServoGain) ) + (  initialServoValue1));;
    servo2.write((filteredY * -(scaledServoGain) ) + (  initialServoValue2));;

    /////////////////////////////////////////////////////////////////////////////////////////////////DATA AND STATE
    /////////////////////////////////////////////////////////////////////////////////////////////////
    //datalogging - time, verticalAccel, rawDegreeY, rawDegreeZ, pidY, pidZ, filteredServoY, filteredServoZ
    myFile.print(times);
    myFile.print(",");
    myFile.print(li_ac.z());
    myFile.print(",");
    myFile.print(degreeY);
    myFile.print(",");
    myFile.print(degreeZ);
    myFile.print(",");
    myFile.print(newY);
    myFile.print(",");
    myFile.print(newZ);
    myFile.print(",");
    myFile.print(filteredY);
    myFile.print(",");
    myFile.println(filteredZ);
    times++;

    Serial.print((newY * -1 ) + (  initialServoValue2));
    Serial.print(",");
    Serial.println((newZ * -1 ) + (  initialServoValue1));

    if (li_ac.z() < -50 ) {
      state++;
    }
  }

  if (state == 2) {
    digitalWrite(ledPinB, LOW);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledPinG, HIGH);
    myFile.close();
    Serial.print("done!!");
    digitalWrite(pyro1, HIGH);
    delay(2000);
    digitalWrite(pyro1, LOW);
    state++ ;
  }

  if (state == 3) {
    Serial.print("program terminated");

  }

}
