//TTB Aerospace: Alto: Aurora ------ Cole-PID Test 
///////////////////////////////////////---------------- VERSION FOR TF-3 - 11/22 -----------------------//////////
#include <Wire.h>
#include <Arduino.h>
#include <Servo.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <SD.h>
//#include "Adafruit_BMP3XX.h"
//#define SEALEVELPRESSURE_HPA (1013.25)

//Adafruit_BMP3XX bmp; // I2C
Adafruit_BNO055 bno(55);

//sd card
File myFile;

//loop State variables
int state = 0 ;
int threshold = 11;
//float baseAlt;

// Set servo start value
const int servoY_offset = 65;
const int servoZ_offset = 124;
Servo servoY;
Servo servoZ;

//PID Variables
double PIDZ, PIDY, errorZ, errorY, previous_errorZ, previous_errorY;

//Upright Angle of the Gyroscope
int desired_angleZ = 0;//servoY
int desired_angleY = 0;//servoX

//"P" Constants
float pidZ_p = 0;
float pidY_p = 0;

//"D" Constants
float pidZ_d = 0;
float pidY_d = 0;


//PID Gains
double kp = .1;
double kd = .05;

double dt, currentTime, previousTime;



//pinouts for Aurora R1
const int servo_x = 5;
const int servo_y = 6;
const int ledPinG = 7;
const int ledPinR = 8;
const int ledPinB = 9;
const int buzzer = 10;
const int pyro1 = 11;


void setup() {
  Serial.begin(9600);
  delay(200);
  bno.setExtCrystalUse(true);


  // Servo
  servoY.attach(5);
  servoZ.attach(6);
  servoY.write(servoY_offset);
  servoZ.write(servoZ_offset);


  pinMode(buzzer, OUTPUT);
  pinMode(pyro1, OUTPUT);


  tone(buzzer, 200, 200);
  delay(300);
  tone(buzzer, 800, 200);
  delay(300);
  tone(buzzer, 500, 200);
  digitalWrite(ledPinG, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(300);                       // wait for a second
  digitalWrite(ledPinG, LOW);    // turn the LED off by making the voltage LOW
  delay(500);
  digitalWrite(ledPinG, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(300);                       // wait for a second
  digitalWrite(ledPinG, LOW);    // turn the LED off by making the voltage LOW
  delay(500);

  if (!SD.begin(4)) {
    digitalWrite(ledPinR, HIGH);
    tone(buzzer, 200, 200);
    delay(300);
    tone(buzzer, 200, 200);
    delay(300);
    while (1);
  }

  SD.remove("flight.csv");
  myFile = SD.open("flight.csv", FILE_WRITE);

  if (myFile) {
    myFile.println("time, verticalAccel, rawDegreeY, rawDegreeZ, pidY, pidZ, servoOutY, servoOutZ");
  }

  if (!bno.begin()) {
    while (1);
  }


/*
  if (!bmp.begin_I2C()) {
    while (1);
  }
  bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_15);
  baseAlt = bmp.readAltitude(SEALEVELPRESSURE_HPA) * 3.281;
*/
}


void loop() {
  // Read gyro sensor data
  if (state == 0) {
    imu::Vector<3> li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    digitalWrite(ledPinR, HIGH);   // turn the LED on (HIGH is the voltage level)
    if (li_ac.z() > threshold ) {
      Serial.print(li_ac.z());
      state++ ;
    }

  }

  if (state == 1) {

    //Defining Time Variables
    currentTime = millis();
    dt = (currentTime - previousTime) / 1000;


    //LED
    digitalWrite(ledPinR, LOW);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledPinB, HIGH);   // turn the LED on (HIGH is the voltage level)

    //IMU DATA
    imu::Vector<3> li_ac = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);

    double degreeY = euler.z();
    double degreeZ = euler.y();

    /////////////////////////////////////////////////////////////////////////////////////////////////FIRST
    previous_errorZ = errorZ;
    previous_errorY = errorY;

    //Inputs to the PID Controller
    errorZ = degreeZ - desired_angleZ;
    errorY = degreeY - desired_angleY;

    //Defining "P"
    pidZ_p = kp * errorZ;
    pidY_p = kp * errorY;

    //Defining "D"
    pidZ_d = kd * ((errorZ - previous_errorZ) / dt);
    pidY_d = kd * ((errorY - previous_errorY) / dt);
    //Adding it all up
    PIDZ = -1 * (pidZ_p + pidZ_d);
    PIDY = -1 * (pidY_p + pidY_d);

    /////////////////////////////////////////////////////////////////////////////////////////////////SERVO
    /////////////////////////////////////////////////////////////////////////////////////////////////
    servoY.write((PIDY * 1) + servoY_offset);
    servoZ.write((PIDZ * 1) + servoZ_offset);

    /////////////////////////////////////////////////////////////////////////////////////////////////DATA AND STATE
    /////////////////////////////////////////////////////////////////////////////////////////////////
    //datalogging - time, verticalAccel, rawDegreeY, rawDegreeZ, pidY, pidZ, filteredPIdY, filteredPidZ, servoOutY, servoOutZ
    myFile.print(currentTime / 100);
    myFile.print(",");
    //myFile.print((bmp.readAltitude(SEALEVELPRESSURE_HPA) * 3.281) - baseAlt);
    //myFile.print(",");
    myFile.print(li_ac.z());
    myFile.print(",");
    myFile.print(degreeY);
    myFile.print(",");
    myFile.print(degreeZ);
    myFile.print(",");
    myFile.print(PIDY * -1);
    myFile.print(",");
    myFile.print(PIDZ * -1);
    myFile.print(",");
    myFile.print((-1) * (servoY.read() - servoY_offset));
    myFile.print(",");
    myFile.println((-1) * (servoZ.read() - servoZ_offset));


    previousTime = currentTime;  


    if (li_ac.z() < -5 ) {
      state++;
    }
  }

  if (state == 2) {
    digitalWrite(ledPinB, LOW);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledPinG, HIGH);
    myFile.close();
    state++ ;
  }

  if (state == 3) {
    Serial.print("program terminated");

  }

}
